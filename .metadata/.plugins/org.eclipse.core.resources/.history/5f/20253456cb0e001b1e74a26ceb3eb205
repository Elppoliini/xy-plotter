/*
===============================================================================
 Name        : main.c
 Author      : $(author)
 Version     :
 Copyright   : $(copyright)
 Description : main definition
===============================================================================
 */

#if defined (__USE_LPCOPEN)
#if defined(NO_BOARD_LIB)
#include "chip.h"
#else
#include "board.h"
#endif
#endif

#include <cr_section_macros.h>
#include "FreeRTOS.h"
#include "task.h"

#include <mutex>
#include "Fmutex.h"
#include "user_vcom.h"
#include "heap_lock_monitor.h"

#include <stdio.h>
#include <string.h>
#include <algorithm>
#include <semphr.h>

#include "ITM_write.h"
#include "LpcUart.h"
#include "Parser.h"
#include "G1.h"
#include "I2C.h"

#include "PWM_settings.h"
#include "SpeedSettings.h"
#include "DigitalIoPin.h"

SemaphoreHandle_t xMutex;
/*******************************************
 * Setup functions:
 * static void prvSetupHardware(void)
 * bool isSimulator()
 * LpcUartConfig LpcUart_Setup()
 *******************************************/
static void prvSetupHardware(void)
{
	SystemCoreClockUpdate();
	Board_Init();
	//Initialize ITM_write

	//Initialize SCT timer
	Chip_SCT_Init(LPC_SCT);
	SCT_Init();
	// Initialize RIT timer and  it interrupt with max priority
	Chip_RIT_Init(LPC_RITIMER);
	NVIC_SetPriority( RITIMER_IRQn, configLIBRARY_MAX_SYSCALL_INTERRUPT_PRIORITY + 1 );
	/* Initial LED0 state is off */

	Board_LED_Set(0, false);
}

bool isSimulator()
{
	I2C_config cfg;
	I2C i2c(cfg);
	char data[32] = { 0 }; // simulator has 32 byte storage
	char tx[1] = { 0 }; // specify start address in simulator (eeprom type addressing, 8-bit address)
	i2c.transaction(0x42, (uint8_t *) tx, 1, (uint8_t *) data, 32);
	if(strcmp(data, "Signal capture")==0) {
		return true;
	}
	return false;
}

LpcUartConfig LpcUart_Setup()
{
	LpcPinMap none = {-1, -1}; // unused pin has negative values in it
	LpcPinMap txpin = { 0, 18 }; // transmit pin that goes to debugger's UART->USB converter
	LpcPinMap rxpin = { 0, 13 }; // receive pin that goes to debugger's UART->USB converter
	LpcUartConfig cfg = { LPC_USART0, 115200, UART_CFG_DATALEN_8 | UART_CFG_PARITY_NONE | UART_CFG_STOPLEN_1, false, txpin, rxpin, none, none };
	LpcUart dbgu(cfg);
	return cfg;
}

/*****************************************************************************
 * Tasks:
 * static void vReadInput(void *pvParameters)
 * - Define LpcUart
 * - Read Gcode from mdraw.
 * - Parser p dose requierd acction to the plotter
 ****************************************************************************/
static void vReadInput(void *pvParameters) {

	vTaskDelay(100); /* wait until semaphores are created */
	Parser p;
	G1 g1;
	ITM_init();
	laser_pwm_set(0);
	g1.calibration();

	while (1) {
		char str[80];
		uint32_t len = USB_receive((uint8_t *)str, 79);
		str[len] = '\0'; /* make sure we have a zero at the end so that we can print the data */
		p.read(str);
		std::string reply = p.reply();
		USB_send((uint8_t *)reply.c_str(), reply.length());
	}
}

/***********************************************
 * extern "C" functions
 * void vConfigureTimerForRunTimeStats( void )
 * void RIT_IRQHandler(void)
 ***********************************************/
extern "C" {
/* Collect runtime statistics*/
void vConfigureTimerForRunTimeStats( void ) {
	Chip_SCT_Init(LPC_SCTSMALL1);
	LPC_SCTSMALL1->CONFIG = SCT_CONFIG_32BIT_COUNTER;
	LPC_SCTSMALL1->CTRL_U = SCT_CTRL_PRE_L(255) | SCT_CTRL_CLRCTR_L; // set prescaler to 256 (255 + 1), and start timer
}
/* Interup for RIT timer*/
void RIT_IRQHandler(void)
{
	/* Setup stepper motors X and Y motor */
	DigitalIoPin stepX(0,24,DigitalIoPin::output,true);
	DigitalIoPin stepY(0,27,DigitalIoPin::output,true);
	DigitalIoPin dirX(1,0,DigitalIoPin::output,true);
	DigitalIoPin dirY(0,28,DigitalIoPin::output,true);

	/* Check if a context switch is required */
	portBASE_TYPE xHigherPriorityWoken = pdFALSE;
	// Tell timer that we have processed the interrupt.
	// Timer then removes the IRQ until next match occurs
	Chip_RIT_ClearIntStatus(LPC_RITIMER); // clear IRQ flag
	/* Move the stepper motor X and Y axis if rit_count = 0 return to task */
	if(RIT_axis == true && RIT_count > 0)
	{
		dirX.write(RIT_dir);
		RIT_count--;
		if(RIT_count == 1){
			stepX.write(1);
		}else{
			stepX.write(0);
		}
	}else if(RIT_axis == false && RIT_count > 0)
	{
		dirY.write(RIT_dir);
		RIT_count--;
		if(RIT_count == 1){
			stepY.write(1);
		}else{
			stepY.write(0);
		}
	}
	else
	{
		Chip_RIT_Disable(LPC_RITIMER); // disable timer
		// Set eventgroup bit and set context switch flag if a higher priority task was woken up
		xEventGroupSetBitsFromISR(xEventGroup,BIT_1,&xHigherPriorityWoken );
	}
	// End the ISR and (possibly) do a context switch
	portEND_SWITCHING_ISR(xHigherPriorityWoken);
}
}

/***************************************************
 * @brief	main routine for XY-plotter
 * @return	Nothing, function should not exit
 ***************************************************/
int main(void)
{
	prvSetupHardware();
	xMutex = xSemaphoreCreateMutex();
	/* Create Event Group */
	xEventGroup = xEventGroupCreate();
	/* Create Tasks */
	xTaskCreate(vReadInput, "vReadInput", configMINIMAL_STACK_SIZE * 10, NULL, (tskIDLE_PRIORITY + 1UL), (TaskHandle_t *) NULL);

	xTaskCreate(cdc_task, "CDC",configMINIMAL_STACK_SIZE * 3, NULL, (tskIDLE_PRIORITY + 1UL),(TaskHandle_t *) NULL);

	/* Start The Scheduler */
	vTaskStartScheduler();
	return 1;
}


